// DO NOT EDIT THIS FILE. GENERATED BY xgen.

//go:build rp2350

package dma

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/pico/p/mmap"
)

type Periph struct {
	CH                 [16]SCH
	INT                [4]SINT
	TIMER              [4]mmio.R32[TIMER]
	MULTI_CHAN_TRIGGER mmio.R32[uint32]
	SNIFF_CTRL         mmio.R32[SNIFF_CTRL]
	SNIFF_DATA         mmio.R32[uint32]
	_                  uint32
	FIFO_LEVELS        mmio.R32[FIFO_LEVELS]
	_                  uint32
	N_CHANNELS         mmio.R32[uint32]
	_                  [5]uint32
	SECCFG_CH          [16]mmio.R32[SECCFG_CH]
	SECCFG_IRQ         [4]mmio.R32[SECCFG_IRQ]
	SECCFG_MISC        mmio.R32[SECCFG_MISC]
	_                  [11]uint32
	MPU_CTRL           mmio.R32[MPU_CTRL]
	MPU                [8]SMPU
	_                  [175]uint32
	CH_DBG             [16]SCH_DBG
}

func DMA() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.DMA_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type SCH struct {
	READ_ADDR            mmio.R32[READ_ADDR]
	WRITE_ADDR           mmio.R32[WRITE_ADDR]
	TRANS_COUNT          mmio.R32[TRANS_COUNT]
	CTRL_TRIG            mmio.R32[CTRL]
	AL1_CTRL             mmio.R32[CTRL]
	AL1_READ_ADDR        mmio.R32[AL1_READ_ADDR]
	AL1_WRITE_ADDR       mmio.R32[AL1_WRITE_ADDR]
	AL1_TRANS_COUNT_TRIG mmio.R32[TRANS_COUNT]
	AL2_CTRL             mmio.R32[CTRL]
	AL2_TRANS_COUNT      mmio.R32[TRANS_COUNT]
	AL2_READ_ADDR        mmio.R32[AL2_READ_ADDR]
	AL2_WRITE_ADDR_TRIG  mmio.R32[AL2_WRITE_ADDR_TRIG]
	AL3_CTRL             mmio.R32[CTRL]
	AL3_WRITE_ADDR       mmio.R32[AL3_WRITE_ADDR]
	AL3_TRANS_COUNT      mmio.R32[TRANS_COUNT]
	AL3_READ_ADDR_TRIG   mmio.R32[AL3_READ_ADDR_TRIG]
}

type READ_ADDR uint32

type WRITE_ADDR uint32

type TRANS_COUNT uint32

func COUNT_(p *Periph, i int) mmio.RM32[TRANS_COUNT] {
	return mmio.RM32[TRANS_COUNT]{&p.CH[i].TRANS_COUNT, COUNT}
}
func MODE_(p *Periph, i int) mmio.RM32[TRANS_COUNT] {
	return mmio.RM32[TRANS_COUNT]{&p.CH[i].TRANS_COUNT, MODE}
}

type CTRL uint32

type AL1_READ_ADDR uint32

type AL1_WRITE_ADDR uint32

type AL2_READ_ADDR uint32

type AL2_WRITE_ADDR_TRIG uint32

type AL3_WRITE_ADDR uint32

type AL3_READ_ADDR_TRIG uint32

type SINT struct {
	R mmio.R32[R]
	E mmio.R32[E]
	F mmio.R32[F]
	S mmio.R32[S]
}

type R uint32

type E uint32

type F uint32

type S uint32

type TIMER uint32

func Y_(p *Periph, i int) mmio.RM32[TIMER] { return mmio.RM32[TIMER]{&p.TIMER[i], Y} }
func X_(p *Periph, i int) mmio.RM32[TIMER] { return mmio.RM32[TIMER]{&p.TIMER[i], X} }

type SNIFF_CTRL uint32

func SEN_(p *Periph) mmio.RM32[SNIFF_CTRL]     { return mmio.RM32[SNIFF_CTRL]{&p.SNIFF_CTRL, SEN} }
func DMACH_(p *Periph) mmio.RM32[SNIFF_CTRL]   { return mmio.RM32[SNIFF_CTRL]{&p.SNIFF_CTRL, DMACH} }
func CALC_(p *Periph) mmio.RM32[SNIFF_CTRL]    { return mmio.RM32[SNIFF_CTRL]{&p.SNIFF_CTRL, CALC} }
func SBSWAP_(p *Periph) mmio.RM32[SNIFF_CTRL]  { return mmio.RM32[SNIFF_CTRL]{&p.SNIFF_CTRL, SBSWAP} }
func OUT_REV_(p *Periph) mmio.RM32[SNIFF_CTRL] { return mmio.RM32[SNIFF_CTRL]{&p.SNIFF_CTRL, OUT_REV} }
func OUT_INV_(p *Periph) mmio.RM32[SNIFF_CTRL] { return mmio.RM32[SNIFF_CTRL]{&p.SNIFF_CTRL, OUT_INV} }

type FIFO_LEVELS uint32

func TDF_LVL_(p *Periph) mmio.RM32[FIFO_LEVELS] {
	return mmio.RM32[FIFO_LEVELS]{&p.FIFO_LEVELS, TDF_LVL}
}
func WAF_LVL_(p *Periph) mmio.RM32[FIFO_LEVELS] {
	return mmio.RM32[FIFO_LEVELS]{&p.FIFO_LEVELS, WAF_LVL}
}
func RAF_LVL_(p *Periph) mmio.RM32[FIFO_LEVELS] {
	return mmio.RM32[FIFO_LEVELS]{&p.FIFO_LEVELS, RAF_LVL}
}

type SECCFG_CH uint32

func PRI_CH_(p *Periph, i int) mmio.RM32[SECCFG_CH] {
	return mmio.RM32[SECCFG_CH]{&p.SECCFG_CH[i], PRI_CH}
}
func SEC_CH_(p *Periph, i int) mmio.RM32[SECCFG_CH] {
	return mmio.RM32[SECCFG_CH]{&p.SECCFG_CH[i], SEC_CH}
}
func LOCK_(p *Periph, i int) mmio.RM32[SECCFG_CH] { return mmio.RM32[SECCFG_CH]{&p.SECCFG_CH[i], LOCK} }

type SECCFG_IRQ uint32

func PRI_IRQ_(p *Periph, i int) mmio.RM32[SECCFG_IRQ] {
	return mmio.RM32[SECCFG_IRQ]{&p.SECCFG_IRQ[i], PRI_IRQ}
}
func SEC_IRQ_(p *Periph, i int) mmio.RM32[SECCFG_IRQ] {
	return mmio.RM32[SECCFG_IRQ]{&p.SECCFG_IRQ[i], SEC_IRQ}
}

type SECCFG_MISC uint32

func SNIFF_P_(p *Periph) mmio.RM32[SECCFG_MISC] {
	return mmio.RM32[SECCFG_MISC]{&p.SECCFG_MISC, SNIFF_P}
}
func SNIFF_S_(p *Periph) mmio.RM32[SECCFG_MISC] {
	return mmio.RM32[SECCFG_MISC]{&p.SECCFG_MISC, SNIFF_S}
}
func TIMER0_P_(p *Periph) mmio.RM32[SECCFG_MISC] {
	return mmio.RM32[SECCFG_MISC]{&p.SECCFG_MISC, TIMER0_P}
}
func TIMER0_S_(p *Periph) mmio.RM32[SECCFG_MISC] {
	return mmio.RM32[SECCFG_MISC]{&p.SECCFG_MISC, TIMER0_S}
}
func TIMER1_P_(p *Periph) mmio.RM32[SECCFG_MISC] {
	return mmio.RM32[SECCFG_MISC]{&p.SECCFG_MISC, TIMER1_P}
}
func TIMER1_S_(p *Periph) mmio.RM32[SECCFG_MISC] {
	return mmio.RM32[SECCFG_MISC]{&p.SECCFG_MISC, TIMER1_S}
}
func TIMER2_P_(p *Periph) mmio.RM32[SECCFG_MISC] {
	return mmio.RM32[SECCFG_MISC]{&p.SECCFG_MISC, TIMER2_P}
}
func TIMER2_S_(p *Periph) mmio.RM32[SECCFG_MISC] {
	return mmio.RM32[SECCFG_MISC]{&p.SECCFG_MISC, TIMER2_S}
}
func TIMER3_P_(p *Periph) mmio.RM32[SECCFG_MISC] {
	return mmio.RM32[SECCFG_MISC]{&p.SECCFG_MISC, TIMER3_P}
}
func TIMER3_S_(p *Periph) mmio.RM32[SECCFG_MISC] {
	return mmio.RM32[SECCFG_MISC]{&p.SECCFG_MISC, TIMER3_S}
}

type MPU_CTRL uint32

func DEF_PRI_(p *Periph) mmio.RM32[MPU_CTRL] { return mmio.RM32[MPU_CTRL]{&p.MPU_CTRL, DEF_PRI} }
func DEF_SEC_(p *Periph) mmio.RM32[MPU_CTRL] { return mmio.RM32[MPU_CTRL]{&p.MPU_CTRL, DEF_SEC} }
func NS_HIDE_ADDR_(p *Periph) mmio.RM32[MPU_CTRL] {
	return mmio.RM32[MPU_CTRL]{&p.MPU_CTRL, NS_HIDE_ADDR}
}

type SMPU struct {
	BAR mmio.R32[BAR]
	LAR mmio.R32[LAR]
}

type BAR uint32

type LAR uint32

func REN_(p *Periph, i int) mmio.RM32[LAR]  { return mmio.RM32[LAR]{&p.MPU[i].LAR, REN} }
func RPRI_(p *Periph, i int) mmio.RM32[LAR] { return mmio.RM32[LAR]{&p.MPU[i].LAR, RPRI} }
func RSEC_(p *Periph, i int) mmio.RM32[LAR] { return mmio.RM32[LAR]{&p.MPU[i].LAR, RSEC} }
func ADDR_(p *Periph, i int) mmio.RM32[LAR] { return mmio.RM32[LAR]{&p.MPU[i].LAR, ADDR} }

type SCH_DBG struct {
	DBG_CTDREQ mmio.R32[DBG_CTDREQ]
	DBG_TCR    mmio.R32[DBG_TCR]
}

type DBG_CTDREQ uint32

type DBG_TCR uint32
