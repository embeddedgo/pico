// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build rp2350

// Package clocks provides access to the registers of the CLOCKS peripheral.
//
// Instances:
//
//	CLOCKS  CLOCKS_BASE  -  CLOCKS_IRQ
//
// Registers:
//
//	0x000 32  CLK_GPOUT0_CTRL       Clock control, can be changed on-the-fly (except for auxsrc)
//	0x004 32  CLK_GPOUT0_DIV
//	0x008 32  CLK_GPOUT0_SELECTED   Indicates which src is currently selected (one-hot)
//	0x00C 32  CLK_GPOUT1_CTRL       Clock control, can be changed on-the-fly (except for auxsrc)
//	0x010 32  CLK_GPOUT1_DIV
//	0x014 32  CLK_GPOUT1_SELECTED   Indicates which src is currently selected (one-hot)
//	0x018 32  CLK_GPOUT2_CTRL       Clock control, can be changed on-the-fly (except for auxsrc)
//	0x01C 32  CLK_GPOUT2_DIV
//	0x020 32  CLK_GPOUT2_SELECTED   Indicates which src is currently selected (one-hot)
//	0x024 32  CLK_GPOUT3_CTRL       Clock control, can be changed on-the-fly (except for auxsrc)
//	0x028 32  CLK_GPOUT3_DIV
//	0x02C 32  CLK_GPOUT3_SELECTED   Indicates which src is currently selected (one-hot)
//	0x030 32  CLK_REF_CTRL          Clock control, can be changed on-the-fly (except for auxsrc)
//	0x034 32  CLK_REF_DIV
//	0x038 32  CLK_REF_SELECTED      Indicates which src is currently selected (one-hot)
//	0x03C 32  CLK_SYS_CTRL          Clock control, can be changed on-the-fly (except for auxsrc)
//	0x040 32  CLK_SYS_DIV
//	0x044 32  CLK_SYS_SELECTED      Indicates which src is currently selected (one-hot)
//	0x048 32  CLK_PERI_CTRL         Clock control, can be changed on-the-fly (except for auxsrc)
//	0x04C 32  CLK_PERI_DIV
//	0x050 32  CLK_PERI_SELECTED     Indicates which src is currently selected (one-hot)
//	0x054 32  CLK_HSTX_CTRL         Clock control, can be changed on-the-fly (except for auxsrc)
//	0x058 32  CLK_HSTX_DIV
//	0x05C 32  CLK_HSTX_SELECTED     Indicates which src is currently selected (one-hot)
//	0x060 32  CLK_USB_CTRL          Clock control, can be changed on-the-fly (except for auxsrc)
//	0x064 32  CLK_USB_DIV
//	0x068 32  CLK_USB_SELECTED      Indicates which src is currently selected (one-hot)
//	0x06C 32  CLK_ADC_CTRL          Clock control, can be changed on-the-fly (except for auxsrc)
//	0x070 32  CLK_ADC_DIV
//	0x074 32  CLK_ADC_SELECTED      Indicates which src is currently selected (one-hot)
//	0x078 32  DFTCLK_XOSC_CTRL
//	0x07C 32  DFTCLK_ROSC_CTRL
//	0x080 32  DFTCLK_LPOSC_CTRL
//	0x084 32  CLK_SYS_RESUS_CTRL
//	0x088 32  CLK_SYS_RESUS_STATUS
//	0x08C 32  FC0_REF_KHZ           Reference clock frequency in kHz
//	0x090 32  FC0_MIN_KHZ           Minimum pass frequency in kHz. This is optional. Set to 0 if you are not using the pass/fail flags
//	0x094 32  FC0_MAX_KHZ           Maximum pass frequency in kHz. This is optional. Set to 0x1ffffff if you are not using the pass/fail flags
//	0x098 32  FC0_DELAY             Delays the start of frequency counting to allow the mux to settle Delay is measured in multiples of the reference clock period
//	0x09C 32  FC0_INTERVAL          The test interval is 0.98us * 2**interval, but let's call it 1us * 2**interval The default gives a test interval of 250us
//	0x0A0 32  FC0_SRC               Clock sent to frequency counter, set to 0 when not required Writing to this register initiates the frequency count
//	0x0A4 32  FC0_STATUS            Frequency counter status
//	0x0A8 32  FC0_RESULT            Result of frequency measurement, only valid when status_done=1
//	0x0AC 32  WAKE_EN0              enable clock in wake mode
//	0x0B0 32  WAKE_EN1              enable clock in wake mode
//	0x0B4 32  SLEEP_EN0             enable clock in sleep mode
//	0x0B8 32  SLEEP_EN1             enable clock in sleep mode
//	0x0BC 32  ENABLED0              indicates the state of the clock enable
//	0x0C0 32  ENABLED1              indicates the state of the clock enable
//	0x0C4 32  INTR                  Raw Interrupts
//	0x0C8 32  INTE                  Interrupt Enable
//	0x0CC 32  INTF                  Interrupt Force
//	0x0D0 32  INTS                  Interrupt status after masking & forcing
//
// Import:
//
//	github.com/embeddedgo/pico/p/mmap
package clocks

const (
	AUXSRC                          CLK_GPOUT0_CTRL = 0x0F << 5 //+ Selects the auxiliary clock source, will glitch when switching
	CLKSRC_PLL_SYS                  CLK_GPOUT0_CTRL = 0x00 << 5
	CLKSRC_GPIN0                    CLK_GPOUT0_CTRL = 0x01 << 5
	CLKSRC_GPIN1                    CLK_GPOUT0_CTRL = 0x02 << 5
	CLKSRC_PLL_USB                  CLK_GPOUT0_CTRL = 0x03 << 5
	CLKSRC_PLL_USB_PRIMARY_REF_OPCG CLK_GPOUT0_CTRL = 0x04 << 5
	ROSC_CLKSRC                     CLK_GPOUT0_CTRL = 0x05 << 5
	XOSC_CLKSRC                     CLK_GPOUT0_CTRL = 0x06 << 5
	LPOSC_CLKSRC                    CLK_GPOUT0_CTRL = 0x07 << 5
	CLK_SYS                         CLK_GPOUT0_CTRL = 0x08 << 5
	CLK_USB                         CLK_GPOUT0_CTRL = 0x09 << 5
	CLK_ADC                         CLK_GPOUT0_CTRL = 0x0A << 5
	CLK_REF                         CLK_GPOUT0_CTRL = 0x0B << 5
	CLK_PERI                        CLK_GPOUT0_CTRL = 0x0C << 5
	CLK_HSTX                        CLK_GPOUT0_CTRL = 0x0D << 5
	OTP_CLK2FC                      CLK_GPOUT0_CTRL = 0x0E << 5
	KILL                            CLK_GPOUT0_CTRL = 0x01 << 10 //+ Asynchronously kills the clock generator, enable must be set low before deasserting kill
	ENABLE                          CLK_GPOUT0_CTRL = 0x01 << 11 //+ Starts and stops the clock generator cleanly
	DC50                            CLK_GPOUT0_CTRL = 0x01 << 12 //+ Enables duty cycle correction for odd divisors, can be changed on-the-fly
	PHASE                           CLK_GPOUT0_CTRL = 0x03 << 16 //+ This delays the enable signal by up to 3 cycles of the input clock This must be set before the clock is enabled to have any effect
	NUDGE                           CLK_GPOUT0_CTRL = 0x01 << 20 //+ An edge on this signal shifts the phase of the output by 1 cycle of the input clock This can be done at any time
	ENABLED                         CLK_GPOUT0_CTRL = 0x01 << 28 //+ clock generator is enabled
)

const (
	AUXSRCn  = 5
	KILLn    = 10
	ENABLEn  = 11
	DC50n    = 12
	PHASEn   = 16
	NUDGEn   = 20
	ENABLEDn = 28
)

const (
	FRAC CLK_GPOUT0_DIV = 0xFFFF << 0  //+ Fractional component of the divisor, can be changed on-the-fly
	INT  CLK_GPOUT0_DIV = 0xFFFF << 16 //+ Integer part of clock divisor, 0 -> max+1, can be changed on-the-fly
)

const (
	FRACn = 0
	INTn  = 16
)

const (
	AUXSRC                          CLK_GPOUT1_CTRL = 0x0F << 5 //+ Selects the auxiliary clock source, will glitch when switching
	CLKSRC_PLL_SYS                  CLK_GPOUT1_CTRL = 0x00 << 5
	CLKSRC_GPIN0                    CLK_GPOUT1_CTRL = 0x01 << 5
	CLKSRC_GPIN1                    CLK_GPOUT1_CTRL = 0x02 << 5
	CLKSRC_PLL_USB                  CLK_GPOUT1_CTRL = 0x03 << 5
	CLKSRC_PLL_USB_PRIMARY_REF_OPCG CLK_GPOUT1_CTRL = 0x04 << 5
	ROSC_CLKSRC                     CLK_GPOUT1_CTRL = 0x05 << 5
	XOSC_CLKSRC                     CLK_GPOUT1_CTRL = 0x06 << 5
	LPOSC_CLKSRC                    CLK_GPOUT1_CTRL = 0x07 << 5
	CLK_SYS                         CLK_GPOUT1_CTRL = 0x08 << 5
	CLK_USB                         CLK_GPOUT1_CTRL = 0x09 << 5
	CLK_ADC                         CLK_GPOUT1_CTRL = 0x0A << 5
	CLK_REF                         CLK_GPOUT1_CTRL = 0x0B << 5
	CLK_PERI                        CLK_GPOUT1_CTRL = 0x0C << 5
	CLK_HSTX                        CLK_GPOUT1_CTRL = 0x0D << 5
	OTP_CLK2FC                      CLK_GPOUT1_CTRL = 0x0E << 5
	KILL                            CLK_GPOUT1_CTRL = 0x01 << 10 //+ Asynchronously kills the clock generator, enable must be set low before deasserting kill
	ENABLE                          CLK_GPOUT1_CTRL = 0x01 << 11 //+ Starts and stops the clock generator cleanly
	DC50                            CLK_GPOUT1_CTRL = 0x01 << 12 //+ Enables duty cycle correction for odd divisors, can be changed on-the-fly
	PHASE                           CLK_GPOUT1_CTRL = 0x03 << 16 //+ This delays the enable signal by up to 3 cycles of the input clock This must be set before the clock is enabled to have any effect
	NUDGE                           CLK_GPOUT1_CTRL = 0x01 << 20 //+ An edge on this signal shifts the phase of the output by 1 cycle of the input clock This can be done at any time
	ENABLED                         CLK_GPOUT1_CTRL = 0x01 << 28 //+ clock generator is enabled
)

const (
	AUXSRCn  = 5
	KILLn    = 10
	ENABLEn  = 11
	DC50n    = 12
	PHASEn   = 16
	NUDGEn   = 20
	ENABLEDn = 28
)

const (
	FRAC CLK_GPOUT1_DIV = 0xFFFF << 0  //+ Fractional component of the divisor, can be changed on-the-fly
	INT  CLK_GPOUT1_DIV = 0xFFFF << 16 //+ Integer part of clock divisor, 0 -> max+1, can be changed on-the-fly
)

const (
	FRACn = 0
	INTn  = 16
)

const (
	AUXSRC                          CLK_GPOUT2_CTRL = 0x0F << 5 //+ Selects the auxiliary clock source, will glitch when switching
	CLKSRC_PLL_SYS                  CLK_GPOUT2_CTRL = 0x00 << 5
	CLKSRC_GPIN0                    CLK_GPOUT2_CTRL = 0x01 << 5
	CLKSRC_GPIN1                    CLK_GPOUT2_CTRL = 0x02 << 5
	CLKSRC_PLL_USB                  CLK_GPOUT2_CTRL = 0x03 << 5
	CLKSRC_PLL_USB_PRIMARY_REF_OPCG CLK_GPOUT2_CTRL = 0x04 << 5
	ROSC_CLKSRC_PH                  CLK_GPOUT2_CTRL = 0x05 << 5
	XOSC_CLKSRC                     CLK_GPOUT2_CTRL = 0x06 << 5
	LPOSC_CLKSRC                    CLK_GPOUT2_CTRL = 0x07 << 5
	CLK_SYS                         CLK_GPOUT2_CTRL = 0x08 << 5
	CLK_USB                         CLK_GPOUT2_CTRL = 0x09 << 5
	CLK_ADC                         CLK_GPOUT2_CTRL = 0x0A << 5
	CLK_REF                         CLK_GPOUT2_CTRL = 0x0B << 5
	CLK_PERI                        CLK_GPOUT2_CTRL = 0x0C << 5
	CLK_HSTX                        CLK_GPOUT2_CTRL = 0x0D << 5
	OTP_CLK2FC                      CLK_GPOUT2_CTRL = 0x0E << 5
	KILL                            CLK_GPOUT2_CTRL = 0x01 << 10 //+ Asynchronously kills the clock generator, enable must be set low before deasserting kill
	ENABLE                          CLK_GPOUT2_CTRL = 0x01 << 11 //+ Starts and stops the clock generator cleanly
	DC50                            CLK_GPOUT2_CTRL = 0x01 << 12 //+ Enables duty cycle correction for odd divisors, can be changed on-the-fly
	PHASE                           CLK_GPOUT2_CTRL = 0x03 << 16 //+ This delays the enable signal by up to 3 cycles of the input clock This must be set before the clock is enabled to have any effect
	NUDGE                           CLK_GPOUT2_CTRL = 0x01 << 20 //+ An edge on this signal shifts the phase of the output by 1 cycle of the input clock This can be done at any time
	ENABLED                         CLK_GPOUT2_CTRL = 0x01 << 28 //+ clock generator is enabled
)

const (
	AUXSRCn  = 5
	KILLn    = 10
	ENABLEn  = 11
	DC50n    = 12
	PHASEn   = 16
	NUDGEn   = 20
	ENABLEDn = 28
)

const (
	FRAC CLK_GPOUT2_DIV = 0xFFFF << 0  //+ Fractional component of the divisor, can be changed on-the-fly
	INT  CLK_GPOUT2_DIV = 0xFFFF << 16 //+ Integer part of clock divisor, 0 -> max+1, can be changed on-the-fly
)

const (
	FRACn = 0
	INTn  = 16
)

const (
	AUXSRC                          CLK_GPOUT3_CTRL = 0x0F << 5 //+ Selects the auxiliary clock source, will glitch when switching
	CLKSRC_PLL_SYS                  CLK_GPOUT3_CTRL = 0x00 << 5
	CLKSRC_GPIN0                    CLK_GPOUT3_CTRL = 0x01 << 5
	CLKSRC_GPIN1                    CLK_GPOUT3_CTRL = 0x02 << 5
	CLKSRC_PLL_USB                  CLK_GPOUT3_CTRL = 0x03 << 5
	CLKSRC_PLL_USB_PRIMARY_REF_OPCG CLK_GPOUT3_CTRL = 0x04 << 5
	ROSC_CLKSRC_PH                  CLK_GPOUT3_CTRL = 0x05 << 5
	XOSC_CLKSRC                     CLK_GPOUT3_CTRL = 0x06 << 5
	LPOSC_CLKSRC                    CLK_GPOUT3_CTRL = 0x07 << 5
	CLK_SYS                         CLK_GPOUT3_CTRL = 0x08 << 5
	CLK_USB                         CLK_GPOUT3_CTRL = 0x09 << 5
	CLK_ADC                         CLK_GPOUT3_CTRL = 0x0A << 5
	CLK_REF                         CLK_GPOUT3_CTRL = 0x0B << 5
	CLK_PERI                        CLK_GPOUT3_CTRL = 0x0C << 5
	CLK_HSTX                        CLK_GPOUT3_CTRL = 0x0D << 5
	OTP_CLK2FC                      CLK_GPOUT3_CTRL = 0x0E << 5
	KILL                            CLK_GPOUT3_CTRL = 0x01 << 10 //+ Asynchronously kills the clock generator, enable must be set low before deasserting kill
	ENABLE                          CLK_GPOUT3_CTRL = 0x01 << 11 //+ Starts and stops the clock generator cleanly
	DC50                            CLK_GPOUT3_CTRL = 0x01 << 12 //+ Enables duty cycle correction for odd divisors, can be changed on-the-fly
	PHASE                           CLK_GPOUT3_CTRL = 0x03 << 16 //+ This delays the enable signal by up to 3 cycles of the input clock This must be set before the clock is enabled to have any effect
	NUDGE                           CLK_GPOUT3_CTRL = 0x01 << 20 //+ An edge on this signal shifts the phase of the output by 1 cycle of the input clock This can be done at any time
	ENABLED                         CLK_GPOUT3_CTRL = 0x01 << 28 //+ clock generator is enabled
)

const (
	AUXSRCn  = 5
	KILLn    = 10
	ENABLEn  = 11
	DC50n    = 12
	PHASEn   = 16
	NUDGEn   = 20
	ENABLEDn = 28
)

const (
	FRAC CLK_GPOUT3_DIV = 0xFFFF << 0  //+ Fractional component of the divisor, can be changed on-the-fly
	INT  CLK_GPOUT3_DIV = 0xFFFF << 16 //+ Integer part of clock divisor, 0 -> max+1, can be changed on-the-fly
)

const (
	FRACn = 0
	INTn  = 16
)

const (
	SRC                             CLK_REF_CTRL = 0x03 << 0 //+ Selects the clock source glitchlessly, can be changed on-the-fly
	ROSC_CLKSRC_PH                  CLK_REF_CTRL = 0x00 << 0
	CLKSRC_CLK_REF_AUX              CLK_REF_CTRL = 0x01 << 0
	XOSC_CLKSRC                     CLK_REF_CTRL = 0x02 << 0
	LPOSC_CLKSRC                    CLK_REF_CTRL = 0x03 << 0
	AUXSRC                          CLK_REF_CTRL = 0x03 << 5 //+ Selects the auxiliary clock source, will glitch when switching
	CLKSRC_PLL_USB                  CLK_REF_CTRL = 0x00 << 5
	CLKSRC_GPIN0                    CLK_REF_CTRL = 0x01 << 5
	CLKSRC_GPIN1                    CLK_REF_CTRL = 0x02 << 5
	CLKSRC_PLL_USB_PRIMARY_REF_OPCG CLK_REF_CTRL = 0x03 << 5
)

const (
	SRCn    = 0
	AUXSRCn = 5
)

const (
	SRC                CLK_SYS_CTRL = 0x01 << 0 //+ Selects the clock source glitchlessly, can be changed on-the-fly
	CLK_REF            CLK_SYS_CTRL = 0x00 << 0
	CLKSRC_CLK_SYS_AUX CLK_SYS_CTRL = 0x01 << 0
	AUXSRC             CLK_SYS_CTRL = 0x07 << 5 //+ Selects the auxiliary clock source, will glitch when switching
	CLKSRC_PLL_SYS     CLK_SYS_CTRL = 0x00 << 5
	CLKSRC_PLL_USB     CLK_SYS_CTRL = 0x01 << 5
	ROSC_CLKSRC        CLK_SYS_CTRL = 0x02 << 5
	XOSC_CLKSRC        CLK_SYS_CTRL = 0x03 << 5
	CLKSRC_GPIN0       CLK_SYS_CTRL = 0x04 << 5
	CLKSRC_GPIN1       CLK_SYS_CTRL = 0x05 << 5
)

const (
	SRCn    = 0
	AUXSRCn = 5
)

const (
	FRAC CLK_SYS_DIV = 0xFFFF << 0  //+ Fractional component of the divisor, can be changed on-the-fly
	INT  CLK_SYS_DIV = 0xFFFF << 16 //+ Integer part of clock divisor, 0 -> max+1, can be changed on-the-fly
)

const (
	FRACn = 0
	INTn  = 16
)

const (
	AUXSRC         CLK_PERI_CTRL = 0x07 << 5 //+ Selects the auxiliary clock source, will glitch when switching
	CLK_SYS        CLK_PERI_CTRL = 0x00 << 5
	CLKSRC_PLL_SYS CLK_PERI_CTRL = 0x01 << 5
	CLKSRC_PLL_USB CLK_PERI_CTRL = 0x02 << 5
	ROSC_CLKSRC_PH CLK_PERI_CTRL = 0x03 << 5
	XOSC_CLKSRC    CLK_PERI_CTRL = 0x04 << 5
	CLKSRC_GPIN0   CLK_PERI_CTRL = 0x05 << 5
	CLKSRC_GPIN1   CLK_PERI_CTRL = 0x06 << 5
	KILL           CLK_PERI_CTRL = 0x01 << 10 //+ Asynchronously kills the clock generator, enable must be set low before deasserting kill
	ENABLE         CLK_PERI_CTRL = 0x01 << 11 //+ Starts and stops the clock generator cleanly
	ENABLED        CLK_PERI_CTRL = 0x01 << 28 //+ clock generator is enabled
)

const (
	AUXSRCn  = 5
	KILLn    = 10
	ENABLEn  = 11
	ENABLEDn = 28
)

const (
	AUXSRC         CLK_HSTX_CTRL = 0x07 << 5 //+ Selects the auxiliary clock source, will glitch when switching
	CLK_SYS        CLK_HSTX_CTRL = 0x00 << 5
	CLKSRC_PLL_SYS CLK_HSTX_CTRL = 0x01 << 5
	CLKSRC_PLL_USB CLK_HSTX_CTRL = 0x02 << 5
	CLKSRC_GPIN0   CLK_HSTX_CTRL = 0x03 << 5
	CLKSRC_GPIN1   CLK_HSTX_CTRL = 0x04 << 5
	KILL           CLK_HSTX_CTRL = 0x01 << 10 //+ Asynchronously kills the clock generator, enable must be set low before deasserting kill
	ENABLE         CLK_HSTX_CTRL = 0x01 << 11 //+ Starts and stops the clock generator cleanly
	PHASE          CLK_HSTX_CTRL = 0x03 << 16 //+ This delays the enable signal by up to 3 cycles of the input clock This must be set before the clock is enabled to have any effect
	NUDGE          CLK_HSTX_CTRL = 0x01 << 20 //+ An edge on this signal shifts the phase of the output by 1 cycle of the input clock This can be done at any time
	ENABLED        CLK_HSTX_CTRL = 0x01 << 28 //+ clock generator is enabled
)

const (
	AUXSRCn  = 5
	KILLn    = 10
	ENABLEn  = 11
	PHASEn   = 16
	NUDGEn   = 20
	ENABLEDn = 28
)

const (
	AUXSRC         CLK_USB_CTRL = 0x07 << 5 //+ Selects the auxiliary clock source, will glitch when switching
	CLKSRC_PLL_USB CLK_USB_CTRL = 0x00 << 5
	CLKSRC_PLL_SYS CLK_USB_CTRL = 0x01 << 5
	ROSC_CLKSRC_PH CLK_USB_CTRL = 0x02 << 5
	XOSC_CLKSRC    CLK_USB_CTRL = 0x03 << 5
	CLKSRC_GPIN0   CLK_USB_CTRL = 0x04 << 5
	CLKSRC_GPIN1   CLK_USB_CTRL = 0x05 << 5
	KILL           CLK_USB_CTRL = 0x01 << 10 //+ Asynchronously kills the clock generator, enable must be set low before deasserting kill
	ENABLE         CLK_USB_CTRL = 0x01 << 11 //+ Starts and stops the clock generator cleanly
	PHASE          CLK_USB_CTRL = 0x03 << 16 //+ This delays the enable signal by up to 3 cycles of the input clock This must be set before the clock is enabled to have any effect
	NUDGE          CLK_USB_CTRL = 0x01 << 20 //+ An edge on this signal shifts the phase of the output by 1 cycle of the input clock This can be done at any time
	ENABLED        CLK_USB_CTRL = 0x01 << 28 //+ clock generator is enabled
)

const (
	AUXSRCn  = 5
	KILLn    = 10
	ENABLEn  = 11
	PHASEn   = 16
	NUDGEn   = 20
	ENABLEDn = 28
)

const (
	AUXSRC         CLK_ADC_CTRL = 0x07 << 5 //+ Selects the auxiliary clock source, will glitch when switching
	CLKSRC_PLL_USB CLK_ADC_CTRL = 0x00 << 5
	CLKSRC_PLL_SYS CLK_ADC_CTRL = 0x01 << 5
	ROSC_CLKSRC_PH CLK_ADC_CTRL = 0x02 << 5
	XOSC_CLKSRC    CLK_ADC_CTRL = 0x03 << 5
	CLKSRC_GPIN0   CLK_ADC_CTRL = 0x04 << 5
	CLKSRC_GPIN1   CLK_ADC_CTRL = 0x05 << 5
	KILL           CLK_ADC_CTRL = 0x01 << 10 //+ Asynchronously kills the clock generator, enable must be set low before deasserting kill
	ENABLE         CLK_ADC_CTRL = 0x01 << 11 //+ Starts and stops the clock generator cleanly
	PHASE          CLK_ADC_CTRL = 0x03 << 16 //+ This delays the enable signal by up to 3 cycles of the input clock This must be set before the clock is enabled to have any effect
	NUDGE          CLK_ADC_CTRL = 0x01 << 20 //+ An edge on this signal shifts the phase of the output by 1 cycle of the input clock This can be done at any time
	ENABLED        CLK_ADC_CTRL = 0x01 << 28 //+ clock generator is enabled
)

const (
	AUXSRCn  = 5
	KILLn    = 10
	ENABLEn  = 11
	PHASEn   = 16
	NUDGEn   = 20
	ENABLEDn = 28
)

const (
	SRC                    DFTCLK_XOSC_CTRL = 0x03 << 0 //+
	NULL                   DFTCLK_XOSC_CTRL = 0x00 << 0
	CLKSRC_PLL_USB_PRIMARY DFTCLK_XOSC_CTRL = 0x01 << 0
	CLKSRC_GPIN0           DFTCLK_XOSC_CTRL = 0x02 << 0
)

const (
	SRCn = 0
)

const (
	SRC                         DFTCLK_ROSC_CTRL = 0x03 << 0 //+
	NULL                        DFTCLK_ROSC_CTRL = 0x00 << 0
	CLKSRC_PLL_SYS_PRIMARY_ROSC DFTCLK_ROSC_CTRL = 0x01 << 0
	CLKSRC_GPIN1                DFTCLK_ROSC_CTRL = 0x02 << 0
)

const (
	SRCn = 0
)

const (
	SRC                          DFTCLK_LPOSC_CTRL = 0x03 << 0 //+
	NULL                         DFTCLK_LPOSC_CTRL = 0x00 << 0
	CLKSRC_PLL_USB_PRIMARY_LPOSC DFTCLK_LPOSC_CTRL = 0x01 << 0
	CLKSRC_GPIN1                 DFTCLK_LPOSC_CTRL = 0x02 << 0
)

const (
	SRCn = 0
)

const (
	TIMEOUT CLK_SYS_RESUS_CTRL = 0xFF << 0  //+ This is expressed as a number of clk_ref cycles and must be >= 2x clk_ref_freq/min_clk_tst_freq
	ENABLE  CLK_SYS_RESUS_CTRL = 0x01 << 8  //+ Enable resus
	FRCE    CLK_SYS_RESUS_CTRL = 0x01 << 12 //+ Force a resus, for test purposes only
	CLEAR   CLK_SYS_RESUS_CTRL = 0x01 << 16 //+ For clearing the resus after the fault that triggered it has been corrected
)

const (
	TIMEOUTn = 0
	ENABLEn  = 8
	FRCEn    = 12
	CLEARn   = 16
)

const (
	FC0_SRC                    FC0_SRC = 0xFF << 0 //+
	NULL                       FC0_SRC = 0x00 << 0
	PLL_SYS_CLKSRC_PRIMARY     FC0_SRC = 0x01 << 0
	PLL_USB_CLKSRC_PRIMARY     FC0_SRC = 0x02 << 0
	ROSC_CLKSRC                FC0_SRC = 0x03 << 0
	ROSC_CLKSRC_PH             FC0_SRC = 0x04 << 0
	XOSC_CLKSRC                FC0_SRC = 0x05 << 0
	CLKSRC_GPIN0               FC0_SRC = 0x06 << 0
	CLKSRC_GPIN1               FC0_SRC = 0x07 << 0
	CLK_REF                    FC0_SRC = 0x08 << 0
	CLK_SYS                    FC0_SRC = 0x09 << 0
	CLK_PERI                   FC0_SRC = 0x0A << 0
	CLK_USB                    FC0_SRC = 0x0B << 0
	CLK_ADC                    FC0_SRC = 0x0C << 0
	CLK_HSTX                   FC0_SRC = 0x0D << 0
	LPOSC_CLKSRC               FC0_SRC = 0x0E << 0
	OTP_CLK2FC                 FC0_SRC = 0x0F << 0
	PLL_USB_CLKSRC_PRIMARY_DFT FC0_SRC = 0x10 << 0
)

const (
	FC0_SRCn = 0
)

const (
	PASS    FC0_STATUS = 0x01 << 0  //+ Test passed
	DONE    FC0_STATUS = 0x01 << 4  //+ Test complete
	RUNNING FC0_STATUS = 0x01 << 8  //+ Test running
	WAITING FC0_STATUS = 0x01 << 12 //+ Waiting for test clock to start
	FAIL    FC0_STATUS = 0x01 << 16 //+ Test failed
	SLOW    FC0_STATUS = 0x01 << 20 //+ Test clock slower than expected, only valid when status_done=1
	FAST    FC0_STATUS = 0x01 << 24 //+ Test clock faster than expected, only valid when status_done=1
	DIED    FC0_STATUS = 0x01 << 28 //+ Test clock stopped during test
)

const (
	PASSn    = 0
	DONEn    = 4
	RUNNINGn = 8
	WAITINGn = 12
	FAILn    = 16
	SLOWn    = 20
	FASTn    = 24
	DIEDn    = 28
)

const (
	FRAC FC0_RESULT = 0x1F << 0      //+
	KHZ  FC0_RESULT = 0x1FFFFFF << 5 //+
)

const (
	FRACn = 0
	KHZn  = 5
)

const (
	CLK_SYS_CLOCKS          WAKE_EN0 = 0x01 << 0  //+
	CLK_SYS_ACCESSCTRL      WAKE_EN0 = 0x01 << 1  //+
	CLK_ADC                 WAKE_EN0 = 0x01 << 2  //+
	CLK_SYS_ADC             WAKE_EN0 = 0x01 << 3  //+
	CLK_SYS_BOOTRAM         WAKE_EN0 = 0x01 << 4  //+
	CLK_SYS_BUSCTRL         WAKE_EN0 = 0x01 << 5  //+
	CLK_SYS_BUSFABRIC       WAKE_EN0 = 0x01 << 6  //+
	CLK_SYS_DMA             WAKE_EN0 = 0x01 << 7  //+
	CLK_SYS_GLITCH_DETECTOR WAKE_EN0 = 0x01 << 8  //+
	CLK_HSTX                WAKE_EN0 = 0x01 << 9  //+
	CLK_SYS_HSTX            WAKE_EN0 = 0x01 << 10 //+
	CLK_SYS_I2C0            WAKE_EN0 = 0x01 << 11 //+
	CLK_SYS_I2C1            WAKE_EN0 = 0x01 << 12 //+
	CLK_SYS_IO              WAKE_EN0 = 0x01 << 13 //+
	CLK_SYS_JTAG            WAKE_EN0 = 0x01 << 14 //+
	CLK_REF_OTP             WAKE_EN0 = 0x01 << 15 //+
	CLK_SYS_OTP             WAKE_EN0 = 0x01 << 16 //+
	CLK_SYS_PADS            WAKE_EN0 = 0x01 << 17 //+
	CLK_SYS_PIO0            WAKE_EN0 = 0x01 << 18 //+
	CLK_SYS_PIO1            WAKE_EN0 = 0x01 << 19 //+
	CLK_SYS_PIO2            WAKE_EN0 = 0x01 << 20 //+
	CLK_SYS_PLL_SYS         WAKE_EN0 = 0x01 << 21 //+
	CLK_SYS_PLL_USB         WAKE_EN0 = 0x01 << 22 //+
	CLK_REF_POWMAN          WAKE_EN0 = 0x01 << 23 //+
	CLK_SYS_POWMAN          WAKE_EN0 = 0x01 << 24 //+
	CLK_SYS_PWM             WAKE_EN0 = 0x01 << 25 //+
	CLK_SYS_RESETS          WAKE_EN0 = 0x01 << 26 //+
	CLK_SYS_ROM             WAKE_EN0 = 0x01 << 27 //+
	CLK_SYS_ROSC            WAKE_EN0 = 0x01 << 28 //+
	CLK_SYS_PSM             WAKE_EN0 = 0x01 << 29 //+
	CLK_SYS_SHA256          WAKE_EN0 = 0x01 << 30 //+
	CLK_SYS_SIO             WAKE_EN0 = 0x01 << 31 //+
)

const (
	CLK_SYS_CLOCKSn          = 0
	CLK_SYS_ACCESSCTRLn      = 1
	CLK_ADCn                 = 2
	CLK_SYS_ADCn             = 3
	CLK_SYS_BOOTRAMn         = 4
	CLK_SYS_BUSCTRLn         = 5
	CLK_SYS_BUSFABRICn       = 6
	CLK_SYS_DMAn             = 7
	CLK_SYS_GLITCH_DETECTORn = 8
	CLK_HSTXn                = 9
	CLK_SYS_HSTXn            = 10
	CLK_SYS_I2C0n            = 11
	CLK_SYS_I2C1n            = 12
	CLK_SYS_IOn              = 13
	CLK_SYS_JTAGn            = 14
	CLK_REF_OTPn             = 15
	CLK_SYS_OTPn             = 16
	CLK_SYS_PADSn            = 17
	CLK_SYS_PIO0n            = 18
	CLK_SYS_PIO1n            = 19
	CLK_SYS_PIO2n            = 20
	CLK_SYS_PLL_SYSn         = 21
	CLK_SYS_PLL_USBn         = 22
	CLK_REF_POWMANn          = 23
	CLK_SYS_POWMANn          = 24
	CLK_SYS_PWMn             = 25
	CLK_SYS_RESETSn          = 26
	CLK_SYS_ROMn             = 27
	CLK_SYS_ROSCn            = 28
	CLK_SYS_PSMn             = 29
	CLK_SYS_SHA256n          = 30
	CLK_SYS_SIOn             = 31
)

const (
	CLK_PERI_SPI0    WAKE_EN1 = 0x01 << 0  //+
	CLK_SYS_SPI0     WAKE_EN1 = 0x01 << 1  //+
	CLK_PERI_SPI1    WAKE_EN1 = 0x01 << 2  //+
	CLK_SYS_SPI1     WAKE_EN1 = 0x01 << 3  //+
	CLK_SYS_SRAM0    WAKE_EN1 = 0x01 << 4  //+
	CLK_SYS_SRAM1    WAKE_EN1 = 0x01 << 5  //+
	CLK_SYS_SRAM2    WAKE_EN1 = 0x01 << 6  //+
	CLK_SYS_SRAM3    WAKE_EN1 = 0x01 << 7  //+
	CLK_SYS_SRAM4    WAKE_EN1 = 0x01 << 8  //+
	CLK_SYS_SRAM5    WAKE_EN1 = 0x01 << 9  //+
	CLK_SYS_SRAM6    WAKE_EN1 = 0x01 << 10 //+
	CLK_SYS_SRAM7    WAKE_EN1 = 0x01 << 11 //+
	CLK_SYS_SRAM8    WAKE_EN1 = 0x01 << 12 //+
	CLK_SYS_SRAM9    WAKE_EN1 = 0x01 << 13 //+
	CLK_SYS_SYSCFG   WAKE_EN1 = 0x01 << 14 //+
	CLK_SYS_SYSINFO  WAKE_EN1 = 0x01 << 15 //+
	CLK_SYS_TBMAN    WAKE_EN1 = 0x01 << 16 //+
	CLK_REF_TICKS    WAKE_EN1 = 0x01 << 17 //+
	CLK_SYS_TICKS    WAKE_EN1 = 0x01 << 18 //+
	CLK_SYS_TIMER0   WAKE_EN1 = 0x01 << 19 //+
	CLK_SYS_TIMER1   WAKE_EN1 = 0x01 << 20 //+
	CLK_SYS_TRNG     WAKE_EN1 = 0x01 << 21 //+
	CLK_PERI_UART0   WAKE_EN1 = 0x01 << 22 //+
	CLK_SYS_UART0    WAKE_EN1 = 0x01 << 23 //+
	CLK_PERI_UART1   WAKE_EN1 = 0x01 << 24 //+
	CLK_SYS_UART1    WAKE_EN1 = 0x01 << 25 //+
	CLK_SYS_USBCTRL  WAKE_EN1 = 0x01 << 26 //+
	CLK_USB          WAKE_EN1 = 0x01 << 27 //+
	CLK_SYS_WATCHDOG WAKE_EN1 = 0x01 << 28 //+
	CLK_SYS_XIP      WAKE_EN1 = 0x01 << 29 //+
	CLK_SYS_XOSC     WAKE_EN1 = 0x01 << 30 //+
)

const (
	CLK_PERI_SPI0n    = 0
	CLK_SYS_SPI0n     = 1
	CLK_PERI_SPI1n    = 2
	CLK_SYS_SPI1n     = 3
	CLK_SYS_SRAM0n    = 4
	CLK_SYS_SRAM1n    = 5
	CLK_SYS_SRAM2n    = 6
	CLK_SYS_SRAM3n    = 7
	CLK_SYS_SRAM4n    = 8
	CLK_SYS_SRAM5n    = 9
	CLK_SYS_SRAM6n    = 10
	CLK_SYS_SRAM7n    = 11
	CLK_SYS_SRAM8n    = 12
	CLK_SYS_SRAM9n    = 13
	CLK_SYS_SYSCFGn   = 14
	CLK_SYS_SYSINFOn  = 15
	CLK_SYS_TBMANn    = 16
	CLK_REF_TICKSn    = 17
	CLK_SYS_TICKSn    = 18
	CLK_SYS_TIMER0n   = 19
	CLK_SYS_TIMER1n   = 20
	CLK_SYS_TRNGn     = 21
	CLK_PERI_UART0n   = 22
	CLK_SYS_UART0n    = 23
	CLK_PERI_UART1n   = 24
	CLK_SYS_UART1n    = 25
	CLK_SYS_USBCTRLn  = 26
	CLK_USBn          = 27
	CLK_SYS_WATCHDOGn = 28
	CLK_SYS_XIPn      = 29
	CLK_SYS_XOSCn     = 30
)

const (
	CLK_SYS_CLOCKS          SLEEP_EN0 = 0x01 << 0  //+
	CLK_SYS_ACCESSCTRL      SLEEP_EN0 = 0x01 << 1  //+
	CLK_ADC                 SLEEP_EN0 = 0x01 << 2  //+
	CLK_SYS_ADC             SLEEP_EN0 = 0x01 << 3  //+
	CLK_SYS_BOOTRAM         SLEEP_EN0 = 0x01 << 4  //+
	CLK_SYS_BUSCTRL         SLEEP_EN0 = 0x01 << 5  //+
	CLK_SYS_BUSFABRIC       SLEEP_EN0 = 0x01 << 6  //+
	CLK_SYS_DMA             SLEEP_EN0 = 0x01 << 7  //+
	CLK_SYS_GLITCH_DETECTOR SLEEP_EN0 = 0x01 << 8  //+
	CLK_HSTX                SLEEP_EN0 = 0x01 << 9  //+
	CLK_SYS_HSTX            SLEEP_EN0 = 0x01 << 10 //+
	CLK_SYS_I2C0            SLEEP_EN0 = 0x01 << 11 //+
	CLK_SYS_I2C1            SLEEP_EN0 = 0x01 << 12 //+
	CLK_SYS_IO              SLEEP_EN0 = 0x01 << 13 //+
	CLK_SYS_JTAG            SLEEP_EN0 = 0x01 << 14 //+
	CLK_REF_OTP             SLEEP_EN0 = 0x01 << 15 //+
	CLK_SYS_OTP             SLEEP_EN0 = 0x01 << 16 //+
	CLK_SYS_PADS            SLEEP_EN0 = 0x01 << 17 //+
	CLK_SYS_PIO0            SLEEP_EN0 = 0x01 << 18 //+
	CLK_SYS_PIO1            SLEEP_EN0 = 0x01 << 19 //+
	CLK_SYS_PIO2            SLEEP_EN0 = 0x01 << 20 //+
	CLK_SYS_PLL_SYS         SLEEP_EN0 = 0x01 << 21 //+
	CLK_SYS_PLL_USB         SLEEP_EN0 = 0x01 << 22 //+
	CLK_REF_POWMAN          SLEEP_EN0 = 0x01 << 23 //+
	CLK_SYS_POWMAN          SLEEP_EN0 = 0x01 << 24 //+
	CLK_SYS_PWM             SLEEP_EN0 = 0x01 << 25 //+
	CLK_SYS_RESETS          SLEEP_EN0 = 0x01 << 26 //+
	CLK_SYS_ROM             SLEEP_EN0 = 0x01 << 27 //+
	CLK_SYS_ROSC            SLEEP_EN0 = 0x01 << 28 //+
	CLK_SYS_PSM             SLEEP_EN0 = 0x01 << 29 //+
	CLK_SYS_SHA256          SLEEP_EN0 = 0x01 << 30 //+
	CLK_SYS_SIO             SLEEP_EN0 = 0x01 << 31 //+
)

const (
	CLK_SYS_CLOCKSn          = 0
	CLK_SYS_ACCESSCTRLn      = 1
	CLK_ADCn                 = 2
	CLK_SYS_ADCn             = 3
	CLK_SYS_BOOTRAMn         = 4
	CLK_SYS_BUSCTRLn         = 5
	CLK_SYS_BUSFABRICn       = 6
	CLK_SYS_DMAn             = 7
	CLK_SYS_GLITCH_DETECTORn = 8
	CLK_HSTXn                = 9
	CLK_SYS_HSTXn            = 10
	CLK_SYS_I2C0n            = 11
	CLK_SYS_I2C1n            = 12
	CLK_SYS_IOn              = 13
	CLK_SYS_JTAGn            = 14
	CLK_REF_OTPn             = 15
	CLK_SYS_OTPn             = 16
	CLK_SYS_PADSn            = 17
	CLK_SYS_PIO0n            = 18
	CLK_SYS_PIO1n            = 19
	CLK_SYS_PIO2n            = 20
	CLK_SYS_PLL_SYSn         = 21
	CLK_SYS_PLL_USBn         = 22
	CLK_REF_POWMANn          = 23
	CLK_SYS_POWMANn          = 24
	CLK_SYS_PWMn             = 25
	CLK_SYS_RESETSn          = 26
	CLK_SYS_ROMn             = 27
	CLK_SYS_ROSCn            = 28
	CLK_SYS_PSMn             = 29
	CLK_SYS_SHA256n          = 30
	CLK_SYS_SIOn             = 31
)

const (
	CLK_PERI_SPI0    SLEEP_EN1 = 0x01 << 0  //+
	CLK_SYS_SPI0     SLEEP_EN1 = 0x01 << 1  //+
	CLK_PERI_SPI1    SLEEP_EN1 = 0x01 << 2  //+
	CLK_SYS_SPI1     SLEEP_EN1 = 0x01 << 3  //+
	CLK_SYS_SRAM0    SLEEP_EN1 = 0x01 << 4  //+
	CLK_SYS_SRAM1    SLEEP_EN1 = 0x01 << 5  //+
	CLK_SYS_SRAM2    SLEEP_EN1 = 0x01 << 6  //+
	CLK_SYS_SRAM3    SLEEP_EN1 = 0x01 << 7  //+
	CLK_SYS_SRAM4    SLEEP_EN1 = 0x01 << 8  //+
	CLK_SYS_SRAM5    SLEEP_EN1 = 0x01 << 9  //+
	CLK_SYS_SRAM6    SLEEP_EN1 = 0x01 << 10 //+
	CLK_SYS_SRAM7    SLEEP_EN1 = 0x01 << 11 //+
	CLK_SYS_SRAM8    SLEEP_EN1 = 0x01 << 12 //+
	CLK_SYS_SRAM9    SLEEP_EN1 = 0x01 << 13 //+
	CLK_SYS_SYSCFG   SLEEP_EN1 = 0x01 << 14 //+
	CLK_SYS_SYSINFO  SLEEP_EN1 = 0x01 << 15 //+
	CLK_SYS_TBMAN    SLEEP_EN1 = 0x01 << 16 //+
	CLK_REF_TICKS    SLEEP_EN1 = 0x01 << 17 //+
	CLK_SYS_TICKS    SLEEP_EN1 = 0x01 << 18 //+
	CLK_SYS_TIMER0   SLEEP_EN1 = 0x01 << 19 //+
	CLK_SYS_TIMER1   SLEEP_EN1 = 0x01 << 20 //+
	CLK_SYS_TRNG     SLEEP_EN1 = 0x01 << 21 //+
	CLK_PERI_UART0   SLEEP_EN1 = 0x01 << 22 //+
	CLK_SYS_UART0    SLEEP_EN1 = 0x01 << 23 //+
	CLK_PERI_UART1   SLEEP_EN1 = 0x01 << 24 //+
	CLK_SYS_UART1    SLEEP_EN1 = 0x01 << 25 //+
	CLK_SYS_USBCTRL  SLEEP_EN1 = 0x01 << 26 //+
	CLK_USB          SLEEP_EN1 = 0x01 << 27 //+
	CLK_SYS_WATCHDOG SLEEP_EN1 = 0x01 << 28 //+
	CLK_SYS_XIP      SLEEP_EN1 = 0x01 << 29 //+
	CLK_SYS_XOSC     SLEEP_EN1 = 0x01 << 30 //+
)

const (
	CLK_PERI_SPI0n    = 0
	CLK_SYS_SPI0n     = 1
	CLK_PERI_SPI1n    = 2
	CLK_SYS_SPI1n     = 3
	CLK_SYS_SRAM0n    = 4
	CLK_SYS_SRAM1n    = 5
	CLK_SYS_SRAM2n    = 6
	CLK_SYS_SRAM3n    = 7
	CLK_SYS_SRAM4n    = 8
	CLK_SYS_SRAM5n    = 9
	CLK_SYS_SRAM6n    = 10
	CLK_SYS_SRAM7n    = 11
	CLK_SYS_SRAM8n    = 12
	CLK_SYS_SRAM9n    = 13
	CLK_SYS_SYSCFGn   = 14
	CLK_SYS_SYSINFOn  = 15
	CLK_SYS_TBMANn    = 16
	CLK_REF_TICKSn    = 17
	CLK_SYS_TICKSn    = 18
	CLK_SYS_TIMER0n   = 19
	CLK_SYS_TIMER1n   = 20
	CLK_SYS_TRNGn     = 21
	CLK_PERI_UART0n   = 22
	CLK_SYS_UART0n    = 23
	CLK_PERI_UART1n   = 24
	CLK_SYS_UART1n    = 25
	CLK_SYS_USBCTRLn  = 26
	CLK_USBn          = 27
	CLK_SYS_WATCHDOGn = 28
	CLK_SYS_XIPn      = 29
	CLK_SYS_XOSCn     = 30
)

const (
	CLK_SYS_CLOCKS          ENABLED0 = 0x01 << 0  //+
	CLK_SYS_ACCESSCTRL      ENABLED0 = 0x01 << 1  //+
	CLK_ADC                 ENABLED0 = 0x01 << 2  //+
	CLK_SYS_ADC             ENABLED0 = 0x01 << 3  //+
	CLK_SYS_BOOTRAM         ENABLED0 = 0x01 << 4  //+
	CLK_SYS_BUSCTRL         ENABLED0 = 0x01 << 5  //+
	CLK_SYS_BUSFABRIC       ENABLED0 = 0x01 << 6  //+
	CLK_SYS_DMA             ENABLED0 = 0x01 << 7  //+
	CLK_SYS_GLITCH_DETECTOR ENABLED0 = 0x01 << 8  //+
	CLK_HSTX                ENABLED0 = 0x01 << 9  //+
	CLK_SYS_HSTX            ENABLED0 = 0x01 << 10 //+
	CLK_SYS_I2C0            ENABLED0 = 0x01 << 11 //+
	CLK_SYS_I2C1            ENABLED0 = 0x01 << 12 //+
	CLK_SYS_IO              ENABLED0 = 0x01 << 13 //+
	CLK_SYS_JTAG            ENABLED0 = 0x01 << 14 //+
	CLK_REF_OTP             ENABLED0 = 0x01 << 15 //+
	CLK_SYS_OTP             ENABLED0 = 0x01 << 16 //+
	CLK_SYS_PADS            ENABLED0 = 0x01 << 17 //+
	CLK_SYS_PIO0            ENABLED0 = 0x01 << 18 //+
	CLK_SYS_PIO1            ENABLED0 = 0x01 << 19 //+
	CLK_SYS_PIO2            ENABLED0 = 0x01 << 20 //+
	CLK_SYS_PLL_SYS         ENABLED0 = 0x01 << 21 //+
	CLK_SYS_PLL_USB         ENABLED0 = 0x01 << 22 //+
	CLK_REF_POWMAN          ENABLED0 = 0x01 << 23 //+
	CLK_SYS_POWMAN          ENABLED0 = 0x01 << 24 //+
	CLK_SYS_PWM             ENABLED0 = 0x01 << 25 //+
	CLK_SYS_RESETS          ENABLED0 = 0x01 << 26 //+
	CLK_SYS_ROM             ENABLED0 = 0x01 << 27 //+
	CLK_SYS_ROSC            ENABLED0 = 0x01 << 28 //+
	CLK_SYS_PSM             ENABLED0 = 0x01 << 29 //+
	CLK_SYS_SHA256          ENABLED0 = 0x01 << 30 //+
	CLK_SYS_SIO             ENABLED0 = 0x01 << 31 //+
)

const (
	CLK_SYS_CLOCKSn          = 0
	CLK_SYS_ACCESSCTRLn      = 1
	CLK_ADCn                 = 2
	CLK_SYS_ADCn             = 3
	CLK_SYS_BOOTRAMn         = 4
	CLK_SYS_BUSCTRLn         = 5
	CLK_SYS_BUSFABRICn       = 6
	CLK_SYS_DMAn             = 7
	CLK_SYS_GLITCH_DETECTORn = 8
	CLK_HSTXn                = 9
	CLK_SYS_HSTXn            = 10
	CLK_SYS_I2C0n            = 11
	CLK_SYS_I2C1n            = 12
	CLK_SYS_IOn              = 13
	CLK_SYS_JTAGn            = 14
	CLK_REF_OTPn             = 15
	CLK_SYS_OTPn             = 16
	CLK_SYS_PADSn            = 17
	CLK_SYS_PIO0n            = 18
	CLK_SYS_PIO1n            = 19
	CLK_SYS_PIO2n            = 20
	CLK_SYS_PLL_SYSn         = 21
	CLK_SYS_PLL_USBn         = 22
	CLK_REF_POWMANn          = 23
	CLK_SYS_POWMANn          = 24
	CLK_SYS_PWMn             = 25
	CLK_SYS_RESETSn          = 26
	CLK_SYS_ROMn             = 27
	CLK_SYS_ROSCn            = 28
	CLK_SYS_PSMn             = 29
	CLK_SYS_SHA256n          = 30
	CLK_SYS_SIOn             = 31
)

const (
	CLK_PERI_SPI0    ENABLED1 = 0x01 << 0  //+
	CLK_SYS_SPI0     ENABLED1 = 0x01 << 1  //+
	CLK_PERI_SPI1    ENABLED1 = 0x01 << 2  //+
	CLK_SYS_SPI1     ENABLED1 = 0x01 << 3  //+
	CLK_SYS_SRAM0    ENABLED1 = 0x01 << 4  //+
	CLK_SYS_SRAM1    ENABLED1 = 0x01 << 5  //+
	CLK_SYS_SRAM2    ENABLED1 = 0x01 << 6  //+
	CLK_SYS_SRAM3    ENABLED1 = 0x01 << 7  //+
	CLK_SYS_SRAM4    ENABLED1 = 0x01 << 8  //+
	CLK_SYS_SRAM5    ENABLED1 = 0x01 << 9  //+
	CLK_SYS_SRAM6    ENABLED1 = 0x01 << 10 //+
	CLK_SYS_SRAM7    ENABLED1 = 0x01 << 11 //+
	CLK_SYS_SRAM8    ENABLED1 = 0x01 << 12 //+
	CLK_SYS_SRAM9    ENABLED1 = 0x01 << 13 //+
	CLK_SYS_SYSCFG   ENABLED1 = 0x01 << 14 //+
	CLK_SYS_SYSINFO  ENABLED1 = 0x01 << 15 //+
	CLK_SYS_TBMAN    ENABLED1 = 0x01 << 16 //+
	CLK_REF_TICKS    ENABLED1 = 0x01 << 17 //+
	CLK_SYS_TICKS    ENABLED1 = 0x01 << 18 //+
	CLK_SYS_TIMER0   ENABLED1 = 0x01 << 19 //+
	CLK_SYS_TIMER1   ENABLED1 = 0x01 << 20 //+
	CLK_SYS_TRNG     ENABLED1 = 0x01 << 21 //+
	CLK_PERI_UART0   ENABLED1 = 0x01 << 22 //+
	CLK_SYS_UART0    ENABLED1 = 0x01 << 23 //+
	CLK_PERI_UART1   ENABLED1 = 0x01 << 24 //+
	CLK_SYS_UART1    ENABLED1 = 0x01 << 25 //+
	CLK_SYS_USBCTRL  ENABLED1 = 0x01 << 26 //+
	CLK_USB          ENABLED1 = 0x01 << 27 //+
	CLK_SYS_WATCHDOG ENABLED1 = 0x01 << 28 //+
	CLK_SYS_XIP      ENABLED1 = 0x01 << 29 //+
	CLK_SYS_XOSC     ENABLED1 = 0x01 << 30 //+
)

const (
	CLK_PERI_SPI0n    = 0
	CLK_SYS_SPI0n     = 1
	CLK_PERI_SPI1n    = 2
	CLK_SYS_SPI1n     = 3
	CLK_SYS_SRAM0n    = 4
	CLK_SYS_SRAM1n    = 5
	CLK_SYS_SRAM2n    = 6
	CLK_SYS_SRAM3n    = 7
	CLK_SYS_SRAM4n    = 8
	CLK_SYS_SRAM5n    = 9
	CLK_SYS_SRAM6n    = 10
	CLK_SYS_SRAM7n    = 11
	CLK_SYS_SRAM8n    = 12
	CLK_SYS_SRAM9n    = 13
	CLK_SYS_SYSCFGn   = 14
	CLK_SYS_SYSINFOn  = 15
	CLK_SYS_TBMANn    = 16
	CLK_REF_TICKSn    = 17
	CLK_SYS_TICKSn    = 18
	CLK_SYS_TIMER0n   = 19
	CLK_SYS_TIMER1n   = 20
	CLK_SYS_TRNGn     = 21
	CLK_PERI_UART0n   = 22
	CLK_SYS_UART0n    = 23
	CLK_PERI_UART1n   = 24
	CLK_SYS_UART1n    = 25
	CLK_SYS_USBCTRLn  = 26
	CLK_USBn          = 27
	CLK_SYS_WATCHDOGn = 28
	CLK_SYS_XIPn      = 29
	CLK_SYS_XOSCn     = 30
)
