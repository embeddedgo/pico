// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build rp2350

// Package uart provides access to the registers of the UART peripheral.
//
// Instances:
//
//	UART0  UART0_BASE  -  UART0_IRQ
//	UART1  UART1_BASE  -  UART1_IRQ
//
// Registers:
//
//	0x000 32  DR         Data register (bits: 0-7 data, 8-11 Rx error, see RSR)
//	0x004 32  RSR        Receive Status Register/Error Clear Register
//	0x018 32  FR         Flag Register
//	0x020 32  ILPR       IrDA Low-Power Counter Register
//	0x024 32  IBRD       Integer Baud Rate Register
//	0x028 32  FBRD       Fractional Baud Rate Register
//	0x02C 32  LCR_H      Line Control Register
//	0x030 32  CR         Control Register
//	0x034 32  IFLS       Interrupt FIFO Level Select Register
//	0x038 32  IMSC       Interrupt Mask Set/Clear Register
//	0x03C 32  RIS        Raw Interrupt Status Register
//	0x040 32  MIS        Masked Interrupt Status Register
//	0x044 32  ICR        Interrupt Clear Register
//	0x048 32  DMACR      DMA Control Register
//	0xFE0 32  PERIPHID0  UARTPeriphID0 Register
//	0xFE4 32  PERIPHID1  UARTPeriphID1 Register
//	0xFE8 32  PERIPHID2  UARTPeriphID2 Register
//	0xFEC 32  PERIPHID3  UARTPeriphID3 Register
//	0xFF0 32  PCELLID0   UARTPCellID0 Register
//	0xFF4 32  PCELLID1   UARTPCellID1 Register
//	0xFF8 32  PCELLID2   UARTPCellID2 Register
//	0xFFC 32  PCELLID3   UARTPCellID3 Register
//
// Import:
//
//	github.com/embeddedgo/pico/p/mmap
package uart

const (
	FE RSR = 0x01 << 0 //+ Framing error. When set to 1, it indicates that the received character did not have a valid stop bit (a valid stop bit is 1). This bit is cleared to 0 by a write to UARTECR. In FIFO mode, this error is associated with the character at the top of the FIFO.
	PE RSR = 0x01 << 1 //+ Parity error. When set to 1, it indicates that the parity of the received data character does not match the parity that the EPS and SPS bits in the Line Control Register, UARTLCR_H. This bit is cleared to 0 by a write to UARTECR. In FIFO mode, this error is associated with the character at the top of the FIFO.
	BE RSR = 0x01 << 2 //+ Break error. This bit is set to 1 if a break condition was detected, indicating that the received data input was held LOW for longer than a full-word transmission time (defined as start, data, parity, and stop bits). This bit is cleared to 0 after a write to UARTECR. In FIFO mode, this error is associated with the character at the top of the FIFO. When a break occurs, only one 0 character is loaded into the FIFO. The next character is only enabled after the receive data input goes to a 1 (marking state) and the next valid start bit is received.
	OE RSR = 0x01 << 3 //+ Overrun error. This bit is set to 1 if data is received and the FIFO is already full. This bit is cleared to 0 by a write to UARTECR. The FIFO contents remain valid because no more data is written when the FIFO is full, only the contents of the shift register are overwritten. The CPU must now read the data, to empty the FIFO.
)

const (
	FEn = 0
	PEn = 1
	BEn = 2
	OEn = 3
)

const (
	CTS  FR = 0x01 << 0 //+ Clear to send. This bit is the complement of the UART clear to send, nUARTCTS, modem status input. That is, the bit is 1 when nUARTCTS is LOW.
	DSR  FR = 0x01 << 1 //+ Data set ready. This bit is the complement of the UART data set ready, nUARTDSR, modem status input. That is, the bit is 1 when nUARTDSR is LOW.
	DCD  FR = 0x01 << 2 //+ Data carrier detect. This bit is the complement of the UART data carrier detect, nUARTDCD, modem status input. That is, the bit is 1 when nUARTDCD is LOW.
	BUSY FR = 0x01 << 3 //+ UART busy. If this bit is set to 1, the UART is busy transmitting data. This bit remains set until the complete byte, including all the stop bits, has been sent from the shift register. This bit is set as soon as the transmit FIFO becomes non-empty, regardless of whether the UART is enabled or not.
	RXFE FR = 0x01 << 4 //+ Receive FIFO empty. The meaning of this bit depends on the state of the FEN bit in the UARTLCR_H Register. If the FIFO is disabled, this bit is set when the receive holding register is empty. If the FIFO is enabled, the RXFE bit is set when the receive FIFO is empty.
	TXFF FR = 0x01 << 5 //+ Transmit FIFO full. The meaning of this bit depends on the state of the FEN bit in the UARTLCR_H Register. If the FIFO is disabled, this bit is set when the transmit holding register is full. If the FIFO is enabled, the TXFF bit is set when the transmit FIFO is full.
	RXFF FR = 0x01 << 6 //+ Receive FIFO full. The meaning of this bit depends on the state of the FEN bit in the UARTLCR_H Register. If the FIFO is disabled, this bit is set when the receive holding register is full. If the FIFO is enabled, the RXFF bit is set when the receive FIFO is full.
	TXFE FR = 0x01 << 7 //+ Transmit FIFO empty. The meaning of this bit depends on the state of the FEN bit in the Line Control Register, UARTLCR_H. If the FIFO is disabled, this bit is set when the transmit holding register is empty. If the FIFO is enabled, the TXFE bit is set when the transmit FIFO is empty. This bit does not indicate if there is data in the transmit shift register.
	RI   FR = 0x01 << 8 //+ Ring indicator. This bit is the complement of the UART ring indicator, nUARTRI, modem status input. That is, the bit is 1 when nUARTRI is LOW.
)

const (
	CTSn  = 0
	DSRn  = 1
	DCDn  = 2
	BUSYn = 3
	RXFEn = 4
	TXFFn = 5
	RXFFn = 6
	TXFEn = 7
	RIn   = 8
)

const (
	BRK  LCR_H = 0x01 << 0 //+ Send break. If this bit is set to 1, a low-level is continually output on the UARTTXD output, after completing transmission of the current character. For the proper execution of the break command, the software must set this bit for at least two complete frames. For normal use, this bit must be cleared to 0.
	PEN  LCR_H = 0x01 << 1 //+ Parity enable: 0 = parity is disabled and no parity bit added to the data frame 1 = parity checking and generation is enabled.
	EPS  LCR_H = 0x01 << 2 //+ Even parity select. Controls the type of parity the UART uses during transmission and reception: 0 = odd parity. The UART generates or checks for an odd number of 1s in the data and parity bits. 1 = even parity. The UART generates or checks for an even number of 1s in the data and parity bits. This bit has no effect when the PEN bit disables parity checking and generation.
	STP2 LCR_H = 0x01 << 3 //+ Two stop bits select. If this bit is set to 1, two stop bits are transmitted at the end of the frame. The receive logic does not check for two stop bits being received.
	FEN  LCR_H = 0x01 << 4 //+ Enable FIFOs: 0 = FIFOs are disabled (character mode) that is, the FIFOs become 1-byte-deep holding registers 1 = transmit and receive FIFO buffers are enabled (FIFO mode).
	WLEN LCR_H = 0x03 << 5 //+ Word length. These bits indicate the number of data bits transmitted or received in a frame as follows: b11 = 8 bits b10 = 7 bits b01 = 6 bits b00 = 5 bits.
	SPS  LCR_H = 0x01 << 7 //+ Stick parity select. 0 = stick parity is disabled 1 = either: * if the EPS bit is 0 then the parity bit is transmitted and checked as a 1 * if the EPS bit is 1 then the parity bit is transmitted and checked as a 0. This bit has no effect when the PEN bit disables parity checking and generation.
)

const (
	BRKn  = 0
	PENn  = 1
	EPSn  = 2
	STP2n = 3
	FENn  = 4
	WLENn = 5
	SPSn  = 7
)

const (
	UARTEN CR = 0x01 << 0  //+ UART enable: 0 = UART is disabled. If the UART is disabled in the middle of transmission or reception, it completes the current character before stopping. 1 = the UART is enabled. Data transmission and reception occurs for either UART signals or SIR signals depending on the setting of the SIREN bit.
	SIREN  CR = 0x01 << 1  //+ SIR enable: 0 = IrDA SIR ENDEC is disabled. nSIROUT remains LOW (no light pulse generated), and signal transitions on SIRIN have no effect. 1 = IrDA SIR ENDEC is enabled. Data is transmitted and received on nSIROUT and SIRIN. UARTTXD remains HIGH, in the marking state. Signal transitions on UARTRXD or modem status inputs have no effect. This bit has no effect if the UARTEN bit disables the UART.
	SIRLP  CR = 0x01 << 2  //+ SIR low-power IrDA mode. This bit selects the IrDA encoding mode. If this bit is cleared to 0, low-level bits are transmitted as an active high pulse with a width of 3 / 16th of the bit period. If this bit is set to 1, low-level bits are transmitted with a pulse width that is 3 times the period of the IrLPBaud16 input signal, regardless of the selected bit rate. Setting this bit uses less power, but might reduce transmission distances.
	LBE    CR = 0x01 << 7  //+ Loopback enable. If this bit is set to 1 and the SIREN bit is set to 1 and the SIRTEST bit in the Test Control Register, UARTTCR is set to 1, then the nSIROUT path is inverted, and fed through to the SIRIN path. The SIRTEST bit in the test register must be set to 1 to override the normal half-duplex SIR operation. This must be the requirement for accessing the test registers during normal operation, and SIRTEST must be cleared to 0 when loopback testing is finished. This feature reduces the amount of external coupling required during system test. If this bit is set to 1, and the SIRTEST bit is set to 0, the UARTTXD path is fed through to the UARTRXD path. In either SIR mode or UART mode, when this bit is set, the modem outputs are also fed through to the modem inputs. This bit is cleared to 0 on reset, to disable loopback.
	TXE    CR = 0x01 << 8  //+ Transmit enable. If this bit is set to 1, the transmit section of the UART is enabled. Data transmission occurs for either UART signals, or SIR signals depending on the setting of the SIREN bit. When the UART is disabled in the middle of transmission, it completes the current character before stopping.
	RXE    CR = 0x01 << 9  //+ Receive enable. If this bit is set to 1, the receive section of the UART is enabled. Data reception occurs for either UART signals or SIR signals depending on the setting of the SIREN bit. When the UART is disabled in the middle of reception, it completes the current character before stopping.
	DTR    CR = 0x01 << 10 //+ Data transmit ready. This bit is the complement of the UART data transmit ready, nUARTDTR, modem status output. That is, when the bit is programmed to a 1 then nUARTDTR is LOW.
	RTS    CR = 0x01 << 11 //+ Request to send. This bit is the complement of the UART request to send, nUARTRTS, modem status output. That is, when the bit is programmed to a 1 then nUARTRTS is LOW.
	OUT1   CR = 0x01 << 12 //+ This bit is the complement of the UART Out1 (nUARTOut1) modem status output. That is, when the bit is programmed to a 1 the output is 0. For DTE this can be used as Data Carrier Detect (DCD).
	OUT2   CR = 0x01 << 13 //+ This bit is the complement of the UART Out2 (nUARTOut2) modem status output. That is, when the bit is programmed to a 1, the output is 0. For DTE this can be used as Ring Indicator (RI).
	RTSEN  CR = 0x01 << 14 //+ RTS hardware flow control enable. If this bit is set to 1, RTS hardware flow control is enabled. Data is only requested when there is space in the receive FIFO for it to be received.
	CTSEN  CR = 0x01 << 15 //+ CTS hardware flow control enable. If this bit is set to 1, CTS hardware flow control is enabled. Data is only transmitted when the nUARTCTS signal is asserted.
)

const (
	UARTENn = 0
	SIRENn  = 1
	SIRLPn  = 2
	LBEn    = 7
	TXEn    = 8
	RXEn    = 9
	DTRn    = 10
	RTSn    = 11
	OUT1n   = 12
	OUT2n   = 13
	RTSENn  = 14
	CTSENn  = 15
)

const (
	TXIFLSEL IFLS = 0x07 << 0 //+ Transmit interrupt FIFO level select. The trigger points for the transmit interrupt are as follows: b000 = Transmit FIFO becomes <= 1 / 8 full b001 = Transmit FIFO becomes <= 1 / 4 full b010 = Transmit FIFO becomes <= 1 / 2 full b011 = Transmit FIFO becomes <= 3 / 4 full b100 = Transmit FIFO becomes <= 7 / 8 full b101-b111 = reserved.
	RXIFLSEL IFLS = 0x07 << 3 //+ Receive interrupt FIFO level select. The trigger points for the receive interrupt are as follows: b000 = Receive FIFO becomes >= 1 / 8 full b001 = Receive FIFO becomes >= 1 / 4 full b010 = Receive FIFO becomes >= 1 / 2 full b011 = Receive FIFO becomes >= 3 / 4 full b100 = Receive FIFO becomes >= 7 / 8 full b101-b111 = reserved.
)

const (
	TXIFLSELn = 0
	RXIFLSELn = 3
)

const (
	RIMIM  IMSC = 0x01 << 0  //+ nUARTRI modem interrupt mask. A read returns the current mask for the UARTRIINTR interrupt. On a write of 1, the mask of the UARTRIINTR interrupt is set. A write of 0 clears the mask.
	CTSMIM IMSC = 0x01 << 1  //+ nUARTCTS modem interrupt mask. A read returns the current mask for the UARTCTSINTR interrupt. On a write of 1, the mask of the UARTCTSINTR interrupt is set. A write of 0 clears the mask.
	DCDMIM IMSC = 0x01 << 2  //+ nUARTDCD modem interrupt mask. A read returns the current mask for the UARTDCDINTR interrupt. On a write of 1, the mask of the UARTDCDINTR interrupt is set. A write of 0 clears the mask.
	DSRMIM IMSC = 0x01 << 3  //+ nUARTDSR modem interrupt mask. A read returns the current mask for the UARTDSRINTR interrupt. On a write of 1, the mask of the UARTDSRINTR interrupt is set. A write of 0 clears the mask.
	RXIM   IMSC = 0x01 << 4  //+ Receive interrupt mask. A read returns the current mask for the UARTRXINTR interrupt. On a write of 1, the mask of the UARTRXINTR interrupt is set. A write of 0 clears the mask.
	TXIM   IMSC = 0x01 << 5  //+ Transmit interrupt mask. A read returns the current mask for the UARTTXINTR interrupt. On a write of 1, the mask of the UARTTXINTR interrupt is set. A write of 0 clears the mask.
	RTIM   IMSC = 0x01 << 6  //+ Receive timeout interrupt mask. A read returns the current mask for the UARTRTINTR interrupt. On a write of 1, the mask of the UARTRTINTR interrupt is set. A write of 0 clears the mask.
	FEIM   IMSC = 0x01 << 7  //+ Framing error interrupt mask. A read returns the current mask for the UARTFEINTR interrupt. On a write of 1, the mask of the UARTFEINTR interrupt is set. A write of 0 clears the mask.
	PEIM   IMSC = 0x01 << 8  //+ Parity error interrupt mask. A read returns the current mask for the UARTPEINTR interrupt. On a write of 1, the mask of the UARTPEINTR interrupt is set. A write of 0 clears the mask.
	BEIM   IMSC = 0x01 << 9  //+ Break error interrupt mask. A read returns the current mask for the UARTBEINTR interrupt. On a write of 1, the mask of the UARTBEINTR interrupt is set. A write of 0 clears the mask.
	OEIM   IMSC = 0x01 << 10 //+ Overrun error interrupt mask. A read returns the current mask for the UARTOEINTR interrupt. On a write of 1, the mask of the UARTOEINTR interrupt is set. A write of 0 clears the mask.
)

const (
	RIMIMn  = 0
	CTSMIMn = 1
	DCDMIMn = 2
	DSRMIMn = 3
	RXIMn   = 4
	TXIMn   = 5
	RTIMn   = 6
	FEIMn   = 7
	PEIMn   = 8
	BEIMn   = 9
	OEIMn   = 10
)

const (
	RIRMIS  RIS = 0x01 << 0  //+ nUARTRI modem interrupt status. Returns the raw interrupt state of the UARTRIINTR interrupt.
	CTSRMIS RIS = 0x01 << 1  //+ nUARTCTS modem interrupt status. Returns the raw interrupt state of the UARTCTSINTR interrupt.
	DCDRMIS RIS = 0x01 << 2  //+ nUARTDCD modem interrupt status. Returns the raw interrupt state of the UARTDCDINTR interrupt.
	DSRRMIS RIS = 0x01 << 3  //+ nUARTDSR modem interrupt status. Returns the raw interrupt state of the UARTDSRINTR interrupt.
	RXRIS   RIS = 0x01 << 4  //+ Receive interrupt status. Returns the raw interrupt state of the UARTRXINTR interrupt.
	TXRIS   RIS = 0x01 << 5  //+ Transmit interrupt status. Returns the raw interrupt state of the UARTTXINTR interrupt.
	RTRIS   RIS = 0x01 << 6  //+ Receive timeout interrupt status. Returns the raw interrupt state of the UARTRTINTR interrupt. a
	FERIS   RIS = 0x01 << 7  //+ Framing error interrupt status. Returns the raw interrupt state of the UARTFEINTR interrupt.
	PERIS   RIS = 0x01 << 8  //+ Parity error interrupt status. Returns the raw interrupt state of the UARTPEINTR interrupt.
	BERIS   RIS = 0x01 << 9  //+ Break error interrupt status. Returns the raw interrupt state of the UARTBEINTR interrupt.
	OERIS   RIS = 0x01 << 10 //+ Overrun error interrupt status. Returns the raw interrupt state of the UARTOEINTR interrupt.
)

const (
	RIRMISn  = 0
	CTSRMISn = 1
	DCDRMISn = 2
	DSRRMISn = 3
	RXRISn   = 4
	TXRISn   = 5
	RTRISn   = 6
	FERISn   = 7
	PERISn   = 8
	BERISn   = 9
	OERISn   = 10
)

const (
	RIMMIS  MIS = 0x01 << 0  //+ nUARTRI modem masked interrupt status. Returns the masked interrupt state of the UARTRIINTR interrupt.
	CTSMMIS MIS = 0x01 << 1  //+ nUARTCTS modem masked interrupt status. Returns the masked interrupt state of the UARTCTSINTR interrupt.
	DCDMMIS MIS = 0x01 << 2  //+ nUARTDCD modem masked interrupt status. Returns the masked interrupt state of the UARTDCDINTR interrupt.
	DSRMMIS MIS = 0x01 << 3  //+ nUARTDSR modem masked interrupt status. Returns the masked interrupt state of the UARTDSRINTR interrupt.
	RXMIS   MIS = 0x01 << 4  //+ Receive masked interrupt status. Returns the masked interrupt state of the UARTRXINTR interrupt.
	TXMIS   MIS = 0x01 << 5  //+ Transmit masked interrupt status. Returns the masked interrupt state of the UARTTXINTR interrupt.
	RTMIS   MIS = 0x01 << 6  //+ Receive timeout masked interrupt status. Returns the masked interrupt state of the UARTRTINTR interrupt.
	FEMIS   MIS = 0x01 << 7  //+ Framing error masked interrupt status. Returns the masked interrupt state of the UARTFEINTR interrupt.
	PEMIS   MIS = 0x01 << 8  //+ Parity error masked interrupt status. Returns the masked interrupt state of the UARTPEINTR interrupt.
	BEMIS   MIS = 0x01 << 9  //+ Break error masked interrupt status. Returns the masked interrupt state of the UARTBEINTR interrupt.
	OEMIS   MIS = 0x01 << 10 //+ Overrun error masked interrupt status. Returns the masked interrupt state of the UARTOEINTR interrupt.
)

const (
	RIMMISn  = 0
	CTSMMISn = 1
	DCDMMISn = 2
	DSRMMISn = 3
	RXMISn   = 4
	TXMISn   = 5
	RTMISn   = 6
	FEMISn   = 7
	PEMISn   = 8
	BEMISn   = 9
	OEMISn   = 10
)

const (
	RIMIC  ICR = 0x01 << 0  //+ nUARTRI modem interrupt clear. Clears the UARTRIINTR interrupt.
	CTSMIC ICR = 0x01 << 1  //+ nUARTCTS modem interrupt clear. Clears the UARTCTSINTR interrupt.
	DCDMIC ICR = 0x01 << 2  //+ nUARTDCD modem interrupt clear. Clears the UARTDCDINTR interrupt.
	DSRMIC ICR = 0x01 << 3  //+ nUARTDSR modem interrupt clear. Clears the UARTDSRINTR interrupt.
	RXIC   ICR = 0x01 << 4  //+ Receive interrupt clear. Clears the UARTRXINTR interrupt.
	TXIC   ICR = 0x01 << 5  //+ Transmit interrupt clear. Clears the UARTTXINTR interrupt.
	RTIC   ICR = 0x01 << 6  //+ Receive timeout interrupt clear. Clears the UARTRTINTR interrupt.
	FEIC   ICR = 0x01 << 7  //+ Framing error interrupt clear. Clears the UARTFEINTR interrupt.
	PEIC   ICR = 0x01 << 8  //+ Parity error interrupt clear. Clears the UARTPEINTR interrupt.
	BEIC   ICR = 0x01 << 9  //+ Break error interrupt clear. Clears the UARTBEINTR interrupt.
	OEIC   ICR = 0x01 << 10 //+ Overrun error interrupt clear. Clears the UARTOEINTR interrupt.
)

const (
	RIMICn  = 0
	CTSMICn = 1
	DCDMICn = 2
	DSRMICn = 3
	RXICn   = 4
	TXICn   = 5
	RTICn   = 6
	FEICn   = 7
	PEICn   = 8
	BEICn   = 9
	OEICn   = 10
)

const (
	RXDMAE   DMACR = 0x01 << 0 //+ Receive DMA enable. If this bit is set to 1, DMA for the receive FIFO is enabled.
	TXDMAE   DMACR = 0x01 << 1 //+ Transmit DMA enable. If this bit is set to 1, DMA for the transmit FIFO is enabled.
	DMAONERR DMACR = 0x01 << 2 //+ DMA on error. If this bit is set to 1, the DMA receive request outputs, UARTRXDMASREQ or UARTRXDMABREQ, are disabled when the UART error interrupt is asserted.
)

const (
	RXDMAEn   = 0
	TXDMAEn   = 1
	DMAONERRn = 2
)

const (
	PARTNUMBER1 PERIPHID1 = 0x0F << 0 //+ These bits read back as 0x0
	DESIGNER0   PERIPHID1 = 0x0F << 4 //+ These bits read back as 0x1
)

const (
	PARTNUMBER1n = 0
	DESIGNER0n   = 4
)

const (
	DESIGNER1 PERIPHID2 = 0x0F << 0 //+ These bits read back as 0x4
	REVISION  PERIPHID2 = 0x0F << 4 //+ This field depends on the revision of the UART: r1p0 0x0 r1p1 0x1 r1p3 0x2 r1p4 0x2 r1p5 0x3
)

const (
	DESIGNER1n = 0
	REVISIONn  = 4
)
