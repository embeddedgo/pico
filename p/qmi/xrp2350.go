// DO NOT EDIT THIS FILE. GENERATED BY xgen.

//go:build rp2350

package qmi

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/pico/p/mmap"
)

type Periph struct {
	DIRECT_CSR mmio.R32[DIRECT_CSR]
	DIRECT_TX  mmio.R32[DIRECT_TX]
	DIRECT_RX  mmio.R32[uint32]
	M          [2]SM
	ATRANS     [8]mmio.R32[ATRANS]
}

func QMI() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.QMI_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type DIRECT_CSR uint32

func EN_(p *Periph) mmio.RM32[DIRECT_CSR]   { return mmio.RM32[DIRECT_CSR]{&p.DIRECT_CSR, EN} }
func BUSY_(p *Periph) mmio.RM32[DIRECT_CSR] { return mmio.RM32[DIRECT_CSR]{&p.DIRECT_CSR, BUSY} }
func ASSERT_CS0N_(p *Periph) mmio.RM32[DIRECT_CSR] {
	return mmio.RM32[DIRECT_CSR]{&p.DIRECT_CSR, ASSERT_CS0N}
}
func ASSERT_CS1N_(p *Periph) mmio.RM32[DIRECT_CSR] {
	return mmio.RM32[DIRECT_CSR]{&p.DIRECT_CSR, ASSERT_CS1N}
}
func AUTO_CS0N_(p *Periph) mmio.RM32[DIRECT_CSR] {
	return mmio.RM32[DIRECT_CSR]{&p.DIRECT_CSR, AUTO_CS0N}
}
func AUTO_CS1N_(p *Periph) mmio.RM32[DIRECT_CSR] {
	return mmio.RM32[DIRECT_CSR]{&p.DIRECT_CSR, AUTO_CS1N}
}
func TXFULL_(p *Periph) mmio.RM32[DIRECT_CSR]  { return mmio.RM32[DIRECT_CSR]{&p.DIRECT_CSR, TXFULL} }
func TXEMPTY_(p *Periph) mmio.RM32[DIRECT_CSR] { return mmio.RM32[DIRECT_CSR]{&p.DIRECT_CSR, TXEMPTY} }
func TXLEVEL_(p *Periph) mmio.RM32[DIRECT_CSR] { return mmio.RM32[DIRECT_CSR]{&p.DIRECT_CSR, TXLEVEL} }
func RXEMPTY_(p *Periph) mmio.RM32[DIRECT_CSR] { return mmio.RM32[DIRECT_CSR]{&p.DIRECT_CSR, RXEMPTY} }
func RXFULL_(p *Periph) mmio.RM32[DIRECT_CSR]  { return mmio.RM32[DIRECT_CSR]{&p.DIRECT_CSR, RXFULL} }
func RXLEVEL_(p *Periph) mmio.RM32[DIRECT_CSR] { return mmio.RM32[DIRECT_CSR]{&p.DIRECT_CSR, RXLEVEL} }
func DCLKDIV_(p *Periph) mmio.RM32[DIRECT_CSR] { return mmio.RM32[DIRECT_CSR]{&p.DIRECT_CSR, DCLKDIV} }
func DRXDELAY_(p *Periph) mmio.RM32[DIRECT_CSR] {
	return mmio.RM32[DIRECT_CSR]{&p.DIRECT_CSR, DRXDELAY}
}

type DIRECT_TX uint32

func DATA_(p *Periph) mmio.RM32[DIRECT_TX]   { return mmio.RM32[DIRECT_TX]{&p.DIRECT_TX, DATA} }
func IWIDTH_(p *Periph) mmio.RM32[DIRECT_TX] { return mmio.RM32[DIRECT_TX]{&p.DIRECT_TX, IWIDTH} }
func DWIDTH_(p *Periph) mmio.RM32[DIRECT_TX] { return mmio.RM32[DIRECT_TX]{&p.DIRECT_TX, DWIDTH} }
func OE_(p *Periph) mmio.RM32[DIRECT_TX]     { return mmio.RM32[DIRECT_TX]{&p.DIRECT_TX, OE} }
func NOPUSH_(p *Periph) mmio.RM32[DIRECT_TX] { return mmio.RM32[DIRECT_TX]{&p.DIRECT_TX, NOPUSH} }

type SM struct {
	TIMING mmio.R32[TIMING]
	RFMT   mmio.R32[FMT]
	RCMD   mmio.R32[CMD]
	WFMT   mmio.R32[FMT]
	WCMD   mmio.R32[CMD]
}

type TIMING uint32

func CLKDIV_(p *Periph, i int) mmio.RM32[TIMING]  { return mmio.RM32[TIMING]{&p.M[i].TIMING, CLKDIV} }
func RXDELAY_(p *Periph, i int) mmio.RM32[TIMING] { return mmio.RM32[TIMING]{&p.M[i].TIMING, RXDELAY} }
func MIN_DESELECT_(p *Periph, i int) mmio.RM32[TIMING] {
	return mmio.RM32[TIMING]{&p.M[i].TIMING, MIN_DESELECT}
}
func MAX_SELECT_(p *Periph, i int) mmio.RM32[TIMING] {
	return mmio.RM32[TIMING]{&p.M[i].TIMING, MAX_SELECT}
}
func SELECT_HOLD_(p *Periph, i int) mmio.RM32[TIMING] {
	return mmio.RM32[TIMING]{&p.M[i].TIMING, SELECT_HOLD}
}
func SELECT_SETUP_(p *Periph, i int) mmio.RM32[TIMING] {
	return mmio.RM32[TIMING]{&p.M[i].TIMING, SELECT_SETUP}
}
func PAGEBREAK_(p *Periph, i int) mmio.RM32[TIMING] {
	return mmio.RM32[TIMING]{&p.M[i].TIMING, PAGEBREAK}
}
func COOLDOWN_(p *Periph, i int) mmio.RM32[TIMING] {
	return mmio.RM32[TIMING]{&p.M[i].TIMING, COOLDOWN}
}

type FMT uint32

type CMD uint32

type ATRANS uint32

func BASE_(p *Periph, i int) mmio.RM32[ATRANS] { return mmio.RM32[ATRANS]{&p.ATRANS[i], BASE} }
func SIZE_(p *Periph, i int) mmio.RM32[ATRANS] { return mmio.RM32[ATRANS]{&p.ATRANS[i], SIZE} }
